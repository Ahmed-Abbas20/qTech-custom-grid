@model qTech_custom_grid.ViewModels.CreateUserViewModel
@{
    var formData = ViewBag.FormData as qTech_custom_grid.ViewModels.UserFormDataViewModel;
}

<div class="modal fade" id="createUserModal" tabindex="-1" aria-labelledby="createUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createUserModalLabel">
                    <i class="fas fa-user-plus"></i> إضافة مستخدم جديد
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="إغلاق"></button>
            </div>
            
            <form id="createUserForm" method="post" action="/User/Create">
                @Html.AntiForgeryToken()
                
                
                <div class="modal-body">
                    <!-- Name Fields -->
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">الاسم الأول <span id="spnA_FirstName" class="fa fa-asterisk" style="color: black;">*</span></label>
                            <input id="txt_FirstName" name="FirstName" type="text" class="form-control" maxlength="15" placeholder="أدخل الاسم الأول" />
                            <span id="spnE_FirstName" class="text-danger"></span>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">اسم الأب <span id="spnA_FatherName" class="fa fa-asterisk" style="color: black;">*</span></label>
                            <input id="txt_FatherName" name="FatherName" type="text" class="form-control" maxlength="15" placeholder="أدخل اسم الأب" />
                            <span id="spnE_FatherName" class="text-danger"></span>
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">اسم الجد <span id="spnA_GrandFatherName" class="fa fa-asterisk" style="color: black;">*</span></label>
                            <input id="txt_GrandFatherName" name="GrandFatherName" type="text" class="form-control" maxlength="15" placeholder="أدخل اسم الجد" />
                            <span id="spnE_GrandFatherName" class="text-danger"></span>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">لقب العائلة <span id="spnA_FamilyName" class="fa fa-asterisk" style="color: black;">*</span></label>
                            <input id="txt_FamilyName" name="FamilyName" type="text" class="form-control" maxlength="15" placeholder="أدخل لقب العائلة" />
                            <span id="spnE_FamilyName" class="text-danger"></span>
                        </div>
                    </div>

                    <!-- Personal Information -->
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">تاريخ الميلاد <span id="spnA_DateOfBirth" class="fa fa-asterisk" style="color: black;">*</span></label>
                            <input id="txt_DateOfBirth" name="DateOfBirth" type="text" class="form-control" 
                                   placeholder="YYYY/MM/DD" 
                                   title="يجب أن يكون العمر بين 18 و 65 سنة" 
                                   onblur="convertDateBeforeValidation(this)"
                                   />
                            <span id="spnE_DateOfBirth" class="text-danger"></span>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">رقم الهوية <span id="spnA_IdentityNumber" class="fa fa-asterisk" style="color: black;">*</span></label>
                            <input id="txt_IdentityNumber" name="IdentityNumber" type="text" class="form-control" maxlength="10" placeholder="أدخل رقم الهوية (10 أرقام)" />
                            <span id="spnE_IdentityNumber" class="text-danger"></span>
                        </div>
                    </div>

                    <!-- Contact Information -->
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">رقم الجوال <span id="spnA_MobileNumber" class="fa fa-asterisk" style="color: black;">*</span></label>
                            <input id="txt_MobileNumber" name="MobileNumber" type="text" class="form-control" maxlength="12" placeholder="مثال: 966501234567" />
                            <span id="spnE_MobileNumber" class="text-danger"></span>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">البريد الإلكتروني <span id="spnA_Email" class="fa"></span></label>
                            <input id="txt_Email" name="Email" type="text" class="form-control" maxlength="50" placeholder="مثال: user@example.com" />
                            <span id="spnE_Email" class="text-danger"></span>
                        </div>
                    </div>

                    <!-- Gender and Nationality -->
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">الجنس <span id="spnA_Gender" class="fa fa-asterisk" style="color: black;">*</span></label>
                            <div class="mt-2">
                                <div class="form-check form-check-inline">
                                    <input id="radio_Male" name="Gender" type="radio" value="1" class="form-check-input" checked />
                                    <label for="radio_Male" class="form-check-label">ذكر</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input id="radio_Female" name="Gender" type="radio" value="2" class="form-check-input" />
                                    <label for="radio_Female" class="form-check-label">أنثى</label>
                                </div>
                            </div>
                            <span id="spnE_Gender" class="text-danger"></span>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">الجنسية <span id="spnA_Nationality" class="fa fa-asterisk" style="color: black;">*</span></label>
                            <select id="ddl_Nationality" name="Nationality" class="form-select">
                                <option value="">اختر الجنسية</option>
                                <option value="1">سعودي</option>
                                <option value="2">أجنبي</option>
                            </select>
                            <span id="spnE_Nationality" class="text-danger"></span>
                        </div>
                    </div>

                    <!-- Bank Information -->
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">رقم الحساب البنكي <span id="spnA_BankAccountNumber" class="fa fa-asterisk" style="color: black;">*</span></label>
                            <input id="txt_BankAccountNumber" name="BankAccountNumber" type="text" class="form-control" maxlength="30" placeholder="أدخل رقم الحساب البنكي" />
                            <span id="spnE_BankAccountNumber" class="text-danger"></span>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">اسم البنك <span class="text-muted">(اختياري)</span></label>
                            <select id="ddl_BankId" name="BankId" class="form-select">
                                <option value="">اختر البنك</option>
                                @if (formData?.Banks != null)
                                {
                                    @foreach (var bank in formData.Banks)
                                    {
                                        <option value="@bank.Value">@bank.Text</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>

                    <!-- Additional Information -->
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">الحالة الاجتماعية <span class="text-muted">(اختياري)</span></label>
                            <select id="ddl_MaritalStatusId" name="MaritalStatusId" class="form-select">
                                <option value="">اختر الحالة الاجتماعية</option>
                                @if (formData?.MaritalStatuses != null)
                                {
                                    @foreach (var status in formData.MaritalStatuses)
                                    {
                                        <option value="@status.Value">@status.Text</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">المؤهل الدراسي <span class="text-muted">(اختياري)</span></label>
                            <input id="txt_EducationalQualification" name="EducationalQualification" type="text" class="form-control" maxlength="200" />
                        </div>
                    </div>

                    <!-- Employment Information -->
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">تاريخ التعيين <span id="spnA_DateOfAppointment" class="fa fa-asterisk" style="color: black;">*</span></label>
                            <input id="txt_DateOfAppointment" name="DateOfAppointment" type="text" class="form-control" 
                                   placeholder="YYYY/MM/DD" 
                                   title="تاريخ التعيين لا يمكن أن يكون في المستقبل"
                                   onblur="convertDateBeforeValidation(this)"
                                    />
                            <span id="spnE_DateOfAppointment" class="text-danger"></span>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">رصيد الإجازات</label>
                            <div class="form-control-plaintext" id="lbl_LeaveBalance">0 يوم</div>
                            <small class="text-muted">يتم حساب الرصيد تلقائياً بمعدل 21 يوم لكل سنة</small>
                        </div>
                    </div>
                </div>
                
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                    <button type="button" class="btn btn-warning" id="btn_ClearValidation">
                        <i class="fas fa-eraser"></i> مسح التحقق
                    </button>
                    <button type="button" class="btn btn-info" id="btn_ResetForm">
                        <i class="fas fa-redo"></i> إعادة تعيين
                    </button>
                    <button type="button" class="btn btn-success" id="btn_SaveUser">
                        <i class="fas fa-save"></i> حفظ
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
// Simple function to convert date format before validation
function convertDateBeforeValidation(input) {
    var value = input.value;
    if (value.includes('/')) {
        var parts = value.split('/');
        
        // Add leading zeros if needed
        if (parts.length >= 2 && parts[1].length === 1) {
            parts[1] = parts[1].padStart(2, '0');
        }
        if (parts.length >= 3 && parts[2].length === 1) {
            parts[2] = parts[2].padStart(2, '0');
        }
        
        var convertedValue = parts.join('/');
        input.value = convertedValue;
        console.log('Simple conversion:', value, '→', convertedValue);
    }
}

$(document).ready(function() {
    // Show the modal
    $('#createUserModal').modal('show');
    
    // Initialize validation array using mValidation framework
    var validationArray = [
        // First Name - Required field with character validation
        {
            Element: 'txt_FirstName',
            spn_A: 'spnA_FirstName',
            spn_E: 'spnE_FirstName',
            validationScheme: {
                Required: {
                    Msg: 'برجاء ادخال الاسم الأول'
                },
                Length: {
                    maxLength: {
                        Value: 15,
                        Msg: 'الاسم الأول لا يجب أن يتجاوز 15 حرف'
                    },
                    minLength: {
                        Value: 2,
                        Msg: 'الاسم الأول يجب أن يكون على الأقل حرفين'
                    }
                },
                Format: {
                    Key: 'charactersOnly',
                    Msg: 'الاسم الأول يجب أن يحتوي على حروف فقط'
                }
            },
            isBlur: true
        },
        // Father Name - Required field with character validation
        {
            Element: 'txt_FatherName',
            spn_A: 'spnA_FatherName',
            spn_E: 'spnE_FatherName',
            validationScheme: {
                Required: {
                    Msg: 'برجاء ادخال اسم الأب'
                },
                Length: {
                    maxLength: {
                        Value: 15,
                        Msg: 'اسم الأب لا يجب أن يتجاوز 15 حرف'
                    },
                    minLength: {
                        Value: 2,
                        Msg: 'اسم الأب يجب أن يكون على الأقل حرفين'
                    }
                },
                Format: {
                    Key: 'charactersOnly',
                    Msg: 'اسم الأب يجب أن يحتوي على حروف فقط'
                }
            },
            isBlur: true
        },
        // Grand Father Name
        {
            Element: 'txt_GrandFatherName',
            spn_A: 'spnA_GrandFatherName',
            spn_E: 'spnE_GrandFatherName',
            validationScheme: {
                Required: {
                    Msg: 'برجاء ادخال اسم الجد'
                },
                Length: {
                    maxLength: {
                        Value: 15,
                        Msg: 'اسم الجد لا يجب أن يتجاوز 15 حرف'
                    }
                }
            },
            isBlur: true
        },
        // Family Name
        {
            Element: 'txt_FamilyName',
            spn_A: 'spnA_FamilyName',
            spn_E: 'spnE_FamilyName',
            validationScheme: {
                Required: {
                    Msg: 'برجاء ادخال لقب العائلة'
                },
                Length: {
                    maxLength: {
                        Value: 15,
                        Msg: 'لقب العائلة لا يجب أن يتجاوز 15 حرف'
                    }
                }
            },
            isBlur: true
        },
        // Date of Birth validation using mValidation.js anyDate scheme
        {
            Element: 'txt_DateOfBirth',
            spn_A: 'spnA_DateOfBirth',
            spn_E: 'spnE_DateOfBirth',
            isBlur: true,
            validationScheme: {
                anyDate: {
                    isRequired: true,
                    requiredMessage: "برجاء إدخال تاريخ الميلاد",
                    invalidMessage: "تاريخ الميلاد غير صحيح",
                    maxDate: function() {
                        var today = new Date();
                        var eighteenYearsAgo = new Date(today.getFullYear() - 18, today.getMonth(), today.getDate());
                        return eighteenYearsAgo.getFullYear() + '/' +
                               (eighteenYearsAgo.getMonth() + 1).toString().padStart(2, '0') + '/' +
                               eighteenYearsAgo.getDate().toString().padStart(2, '0');
                    },
                    maxRangeMessage: "يجب أن يكون عمر الموظف 18 سنة على الأقل",
                    isGeorg: true
                },
                onSuccess: function() {
                    // Validate hiring date when birth date changes
                    if (typeof validateSpecificElement === 'function') {
                        setTimeout(function() {
                            validateSpecificElement('txt_DateOfAppointment');
                        }, 100);
                    }
                }
            }
        },
        // Identity Number validation
        {
            Element: 'txt_IdentityNumber',
            spn_A: 'spnA_IdentityNumber',
            spn_E: 'spnE_IdentityNumber',
            validationScheme: {
                Required: {
                    Msg: 'برجاء إدخال رقم الهوية'
                },
                Length: {
                    maxLength: {
                        Value: 10,
                        Msg: 'رقم الهوية لا يجب أن يتجاوز 10 أرقام'
                    }
                },
                Format: {
                    Key: 'int',
                    Msg: 'رقم الهوية يجب أن يحتوي على أرقام فقط'
                },
                checkExist: {
                    Url: '/User/CheckIdentityExists',
                    Data: function() {
                        return JSON.stringify({ identityNumber: $('#txt_IdentityNumber').val() });
                    },
                    successValue: false,
                    Msg: 'عفوا رقم الهوية مكرر'
                }
            },
            isBlur: true
        },
        // Mobile Number validation
        {
            Element: 'txt_MobileNumber',
            spn_A: 'spnA_MobileNumber',
            spn_E: 'spnE_MobileNumber',
            validationScheme: {
                Required: {
                    Msg: 'برجاء ادخال رقم الجوال'
                },
                Length: {
                    maxLength: {
                        Value: 12,
                        Msg: 'رقم الجوال لا يجب أن يتجاوز 12 رقم'
                    }
                },
                Pattern: {
                    Value: 'MOBILE',
                    Msg: 'عفوا رقم الجوال لابد ان يبدأ بـ 9665'
                }
            },
            isBlur: true
        },
        // Email validation
        {
            Element: 'txt_Email',
            spn_A: 'spnA_Email',
            spn_E: 'spnE_Email',
            validationScheme: {
                Pattern: {
                    Value: 'EMAIL',
                    Msg: 'عفوا صيغة البريد الالكتروني غير صحيح'
                },
                Length: {
                    maxLength: {
                        Value: 50,
                        Msg: 'البريد الإلكتروني لا يجب أن يتجاوز 50 حرف'
                    }
                }
            },
            isBlur: true
        },
        // Bank Account Number validation
        {
            Element: 'txt_BankAccountNumber',
            spn_A: 'spnA_BankAccountNumber',
            spn_E: 'spnE_BankAccountNumber',
            validationScheme: {
                Required: {
                    Msg: 'برجاء ادخال رقم الحساب البنكي'
                },
                Length: {
                    maxLength: {
                        Value: 30,
                        Msg: 'رقم الحساب البنكي لا يجب أن يتجاوز 30 حرف'
                    }
                }
            },
            isBlur: true
        },
        // Nationality validation
        {
            Element: 'ddl_Nationality',
            spn_A: 'spnA_Nationality',
            spn_E: 'spnE_Nationality',
            validationScheme: {
                Required: {
                    Value: '',
                    Msg: 'برجاء اختيار الجنسية'
                }
            },
            isChange: true
        },
        // Date of Appointment validation using mValidation.js anyDate scheme
        {
            Element: 'txt_DateOfAppointment',
            spn_A: 'spnA_DateOfAppointment',
            spn_E: 'spnE_DateOfAppointment',
            isBlur: true,
            validationScheme: {
                anyDate: {
                    isRequired: true,
                    requiredMessage: "برجاء إدخال تاريخ التعيين",
                    invalidMessage: "تاريخ التعيين غير صحيح",
                    minDate: function() {
                        var birthDateElement = document.getElementById('txt_DateOfBirth');
                        var birthDateValue = birthDateElement ? birthDateElement.value : null;
                        console.log('minDate function called, birthDateValue:', birthDateValue);
                        
                        if (!birthDateValue) {
                            console.log('No birth date, returning default');
                            return "1980/01/01";
                        }
                        
                        // birthDateValue is already in YYYY/MM/DD format
                        console.log('Using birthDateValue directly:', birthDateValue);
                        var birthDate = new Date(birthDateValue.replace(/\//g, '-'));
                        console.log('Parsed birthDate:', birthDate);
                        
                        var minHiringDate = new Date(birthDate.getFullYear() + 18, birthDate.getMonth(), birthDate.getDate());
                        var result = minHiringDate.getFullYear() + '/' + 
                               (minHiringDate.getMonth() + 1).toString().padStart(2, '0') + '/' +
                               minHiringDate.getDate().toString().padStart(2, '0');
                        console.log('minDate result:', result);
                        return result;
                    },
                    minRangeMessage: "تاريخ التعيين يجب أن يكون بعد إتمام 18 سنة من تاريخ الميلاد",
                    maxDate: function() {
                        // Get today's date in YYYY/MM/DD format
                        var today = new Date();
                        var todayStr = today.getFullYear() + '/' + 
                               (today.getMonth() + 1).toString().padStart(2, '0') + '/' +
                               today.getDate().toString().padStart(2, '0');
                        console.log('maxDate (today):', todayStr);
                        console.log('Current date object:', today);
                        console.log('Today year:', today.getFullYear(), 'month:', today.getMonth() + 1, 'day:', today.getDate());
                        return todayStr;
                    },
                    maxRangeMessage: "لا يمكن ان يكون تاريخ التعيين بعد تاريخ اليوم",
                    isGeorg: true
                },
            }
        }
    ];

    // Initialize asterisks as BLACK first (proper mValidation logic)
    validationArray.forEach(function(item) {
        if (item.validationScheme && item.validationScheme.Required) {
            var asteriskElement = document.getElementById(item.spn_A);
            if (asteriskElement) {
                asteriskElement.style.color = 'black'; // Start with black, turn red on validation failure
            }
        }
    });



    // Simple approach: Convert date right before validation
    function convertDateBeforeValidation(input) {
        var value = input.value;
        if (value.includes('/')) {
            var parts = value.split('/');
            
            // Add leading zeros if needed
            if (parts.length >= 2 && parts[1].length === 1) {
                parts[1] = parts[1].padStart(2, '0');
            }
            if (parts.length >= 3 && parts[2].length === 1) {
                parts[2] = parts[2].padStart(2, '0');
            }
            
            var convertedValue = parts.join('/');
            input.value = convertedValue;
            console.log('Simple conversion:', value, '→', convertedValue);
        }
    }

    // Add validation events using mValidation.js
    AddValidationEvents(validationArray);

    // Calculate leave balance when appointment date changes
    $('#txt_DateOfAppointment').on('change', function() {
        calculateLeaveBalance();
    });

    // Save button click
    $('#btn_SaveUser').on('click', function() {
        // Run validation using mValidation.js
        var validationResult = validateAll(validationArray, 1);
        
        if (validationResult) {
            saveUser();
        } else {
            alert('برجاء تصحيح الأخطاء في النموذج أولاً');
        }
    });

    // Clear validation button
    $('#btn_ClearValidation').on('click', function() {
            clearValidation(validationArray);
    });

    // Reset form button
    $('#btn_ResetForm').on('click', function() {
        // Clear all form fields
        $('#createUserForm')[0].reset();
        // Clear validation
            clearValidation(validationArray);
        // Reset leave balance
        $('#lbl_LeaveBalance').text('0 يوم');
        // Reset default values
        $('#radio_Male').prop('checked', true);
    });

    // Calculate leave balance
    function calculateLeaveBalance() {
        var appointmentDate = $('#txt_DateOfAppointment').val();
        if (appointmentDate) {
            var appointment = new Date(appointmentDate);
            var today = new Date();
            
            var yearsDiff = today.getFullYear() - appointment.getFullYear();
            var monthsDiff = today.getMonth() - appointment.getMonth();
            var daysDiff = today.getDate() - appointment.getDate();
            
            // Adjust for partial months
            if (daysDiff < 0) {
                monthsDiff--;
            }
            if (monthsDiff < 0) {
                yearsDiff--;
                monthsDiff += 12;
            }
            
            var totalMonths = yearsDiff * 12 + monthsDiff;
            var leaveBalance = Math.floor((totalMonths / 12) * 21);
            
            $('#lbl_LeaveBalance').text(leaveBalance + ' يوم');
        } else {
            $('#lbl_LeaveBalance').text('0 يوم');
        }
    }

    // Save user function
    function saveUser() {
        var formData = new FormData($('#createUserForm')[0]);
        
        $.ajax({
            url: '/User/Create',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                if (response.success) {
                    $('#createUserModal').modal('hide');
                    alert(response.message);
                    if (window.refreshUsersGrid) {
                        window.refreshUsersGrid();
                    } else if (typeof Reload === 'function' && typeof usersGrid !== 'undefined') {
                        Reload(usersGrid.searchObject, usersGrid);
                    }
                } else {
                    alert(response.message);
                }
            },
            error: function(xhr, status, error) {
                try {
                    var errorResponse = JSON.parse(xhr.responseText);
                    alert('حدث خطأ أثناء حفظ البيانات: ' + (errorResponse.message || error));
                } catch (e) {
                    alert('حدث خطأ أثناء حفظ البيانات: ' + xhr.status + ' - ' + error);
                }
            }
        });
    }
});
</script>
