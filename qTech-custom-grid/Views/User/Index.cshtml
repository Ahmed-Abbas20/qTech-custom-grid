@model qTech_custom_grid.ViewModels.UserSearchViewModel

@{
    ViewData["Title"] = "إدارة المستخدمين";
}

@* Add anti-forgery token for AJAX requests *@
@Html.AntiForgeryToken()

<div class="container-fluid">
    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-12">
            <h2 class="text-primary">
                <i class="fas fa-users"></i> إدارة المستخدمين
            </h2>
            <hr />
        </div>
    </div>

    <!-- Search and Action Bar -->
    <div class="row mb-3">
        <div class="col-md-8">
            <div class="row">
                <div class="col-md-4">
                    <div class="input-group">
                        <input type="text" class="form-control" id="txt_PhoneSearch" placeholder="البحث برقم الجوال..." />
                        <span class="input-group-text"><i class="fas fa-phone"></i></span>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="input-group">
                        <input type="text" class="form-control" id="txt_IdSearch" placeholder="البحث برقم الهوية..." />
                        <span class="input-group-text"><i class="fas fa-id-card"></i></span>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="btn-group w-100" role="group">
                        <button class="btn btn-outline-primary" type="button" id="btn_Search">
                            <i class="fas fa-search"></i> بحث
                        </button>
                        <button class="btn btn-outline-secondary" type="button" id="btn_ClearSearch">
                            <i class="fas fa-times"></i> مسح
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4 text-end">
            <!-- Action Buttons -->
            <button type="button" class="btn btn-success" id="btn_Add">
                <i class="fas fa-plus"></i> إضافة
            </button>
            <button type="button" class="btn btn-primary" id="btn_View" disabled>
                <i class="fas fa-eye"></i> عرض
            </button>
            <button type="button" class="btn btn-danger" id="btn_Delete" disabled>
                <i class="fas fa-trash"></i> حذف
            </button>
        </div>
    </div>

    <!-- Loading Indicator -->
    <div id="div_Loader" class="text-center" style="display: none;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">جاري التحميل...</span>
        </div>
        <p>جاري تحميل البيانات...</p>
    </div>

    <!-- Users Grid using mGrid -->
    <div class="row">
        <div class="col-12">
            <table id="tbl_Users" class="table table-striped table-hover" style="display: none;">
                <!-- Grid will be generated by mGrid -->
                <!-- Pagination will be integrated as table caption by mGrid -->
            </table>
        </div>
    </div>

    <!-- Empty Data Message -->
    <div id="div_Empty" class="text-center py-4" style="display: none;">
        <i class="fas fa-users fa-3x text-muted mb-3"></i>
        <h5 class="text-muted">لا توجد بيانات للعرض</h5>
        <p class="text-muted">لم يتم العثور على مستخدمين مطابقين لمعايير البحث</p>
    </div>

    <!-- Hidden Pager Container (for mGrid compatibility) -->
    <div id="div_Pager" style="display: none;">
        <!-- This div exists only for mGrid compatibility, actual pagination will be in table caption -->
    </div>
</div>

<!-- User Modal Container -->
<div id="userModalContainer">
    <!-- Modals will be loaded here via AJAX -->
</div>

<!-- Tooltip for grid -->
<div id="div_title" style="display: none;"></div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmationModalLabel">تأكيد العملية</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="إغلاق"></button>
            </div>
            <div class="modal-body" id="confirmationModalBody">
                <!-- Confirmation message will be set here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                <button type="button" class="btn btn-danger" id="confirmActionBtn">موافق</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Include existing validation and grid scripts -->
    <script src="~/js/mScript.js"></script>
    <script src="~/js/mValidation.js"></script>
    <script src="~/js/mSingleCheck.js"></script>
    <script src="~/js/mGrid-1.0.js"></script>
    
    <script>
        // Encapsulate all functionality in IIFE to avoid global variables
        (function() {
            'use strict';
            
            // Private variables
            var usersGrid = null;
            var selectedUserId = null;
            
            // Initialize on document ready
            $(document).ready(function() {
                initializeUsersGrid();
                bindActionButtons();
            });

            // Initialize mGrid for users
            function initializeUsersGrid() {
                usersGrid = {
                    Table: {
                        ID: 'tbl_Users',
                        Header: { Row: {} },
                        Body: { Row: {} }
                    },
                    Columns: [
                        GridHelper.getGridColumnCheckBoxObj("", "50px", "Id", {
                            check_OnChange: function() {
                                updateSelectedUser();
                                updateActionButtons();
                            }
                        }),
                        GridHelper.getGridColumnObj('IdentityNumber', "رقم الهوية", false, 120, 30, true),
                        GridHelper.getGridColumnObj('FullName', "اسم الموظف", true, 200, 30, true),
                        GridHelper.getGridColumnObj('MobileNumber', "رقم الجوال", false, 120, 30, true),
                        GridHelper.getGridColumnObj('MaritalStatusName', "الحالة الاجتماعية", false, 150, 30, true),
                        GridHelper.getGridColumnObj('NationalityName', "الجنسية", false, 100, 30, true),
                        GridHelper.getGridColumnObj('Email', "البريد الإلكتروني", true, 200, 30, true)
                    ],
                    Url: '/User/GetUsersForGrid',
                    requestType: 'POST',
                    pageRowCounts: 10,
                    sortColumn: 'FullName',
                    sortOrder: 'ASC',
                    sortingNotificator: false,
                    searchObject: {},
                    Pager: {
                        Container: { ID: 'div_Pager' },
                        firstButton: { ID: 'btn_First' },
                        backButton: { ID: 'btn_Back' },
                        nextButton: { ID: 'btn_Next' },
                        lastButton: { ID: 'btn_Last' },
                        currentPageText: { ID: 'txt_CurrentPage' },
                        pagesCountLabel: { ID: 'lbl_PagesCount' },
                        rowsCountLabel: { ID: 'lbl_RowsCount' }
                    },
                    Empty: {
                        ID: 'div_Empty',
                        Text: 'لا توجد بيانات للعرض'
                    },
                    Loader: {
                        Container: { ID: 'div_Loader' }
                    },
                    onGridComplete: function(utility) {
                        console.log('Grid loaded successfully - applying single-check');
                        applySingleCheck();
                    },
                    onRowComplete: function(row) {
                        applySingleCheck();
                    }
                };

                mGridInitialize(usersGrid);
                applySingleCheck();
            }

            // Update selected user from checkbox
            function updateSelectedUser() {
                selectedUserId = null;
                $('input[name="cb_Select"]:checked').each(function() {
                    var userId = parseInt($(this).attr('id').replace('cb_Select_', ''));
                    if (userId) {
                        selectedUserId = userId;
                    }
                });
            }

            // Update action buttons state
            function updateActionButtons() {
                var hasSelection = selectedUserId !== null;
                $('#btn_View').prop('disabled', !hasSelection);
                $('#btn_Delete').prop('disabled', !hasSelection);
            }

            // Apply single check functionality using mSingleCheck.js
            function applySingleCheck() {
                if (!(window.mScript && typeof mScript.mSingleCheck === 'function')) return;
                
                try {
                    var container = mScript.getByIds('tbl_Users');
                    if (container && typeof container.getByTypes === 'function') {
                        var group = container.getByTypes(['checkbox']);
                        if (group && group.Elements) {
                            for (var i = 0; i < group.Elements.length; i++) {
                                group.Elements[i].onclick = null;
                            }
                        }
                    }
                } catch (_) {}

                var delays = [0, 50, 150];
                for (var d = 0; d < delays.length; d++) {
                    (function(delayMs) {
                        setTimeout(function() {
                            try {
                                mScript.mSingleCheck({
                                    Container: 'tbl_Users',
                                    setIds: false,
                                    OnCheck: function (ctx) {
                                        updateSelectedUser();
                                        updateActionButtons();
                                    },
                                    OnUnCheck: function (ctx) {
                                        updateSelectedUser();
                                        updateActionButtons();
                                    }
                                });
                            } catch (e) { console.error('applySingleCheck error:', e); }
                        }, delayMs);
                    })(delays[d]);
                }
            }

            // Bind action buttons
            function bindActionButtons() {
                $('#btn_Search').on('click', performSearch);
                $('#btn_ClearSearch').on('click', clearSearch);
                $('#txt_PhoneSearch, #txt_IdSearch').on('keypress', function(e) {
                    if (e.which === 13) performSearch();
                });
                $('#btn_Add').on('click', showCreateModal);
                $('#btn_View').on('click', viewSelectedUser);
                $('#btn_Delete').on('click', deleteSelectedUsers);
            }

            // Search functionality
            function performSearch() {
                var phoneSearch = $('#txt_PhoneSearch').val().trim();
                var idSearch = $('#txt_IdSearch').val().trim();
                var searchObject = { 
                    phoneSearch: phoneSearch,
                    idSearch: idSearch
                };
                usersGrid.searchObject = searchObject;
                Reload(searchObject, usersGrid);
            }

            // Clear search functionality
            function clearSearch() {
                $('#txt_PhoneSearch').val('');
                $('#txt_IdSearch').val('');
                var emptySearchObject = { phoneSearch: '', idSearch: '' };
                usersGrid.searchObject = emptySearchObject;
                Reload(emptySearchObject, usersGrid);
            }

            // Show create modal
            function showCreateModal() {
                $.get('/User/Create')
                    .done(function(html) {
                        $('#userModalContainer').html(html);
                    })
                    .fail(function() {
                        alert('حدث خطأ أثناء تحميل نموذج الإضافة');
                    });
            }

            // View selected user
            function viewSelectedUser() {
                if (selectedUserId) {
                    window.location.href = '/User/Details/' + selectedUserId;
                }
            }

            // Delete selected user
            function deleteSelectedUsers() {
                if (!selectedUserId) return;
                
                $('#confirmationModalLabel').text('تأكيد الحذف');
                $('#confirmationModalBody').text('هل أنت متأكد من حذف هذا المستخدم؟');
                $('#confirmActionBtn').off('click').on('click', function() {
                    $('#confirmationModal').modal('hide');
                    performDelete();
                });
                $('#confirmationModal').modal('show');
            }

            // Perform actual delete
            function performDelete() {
                $.ajax({
                    url: '/User/Delete',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ id: selectedUserId }),
                    success: function(response) {
                        if (response.success) {
                            alert(response.message);
                            Reload(usersGrid.searchObject, usersGrid);
                            selectedUserId = null;
                            updateActionButtons();
                        } else {
                            alert(response.message);
                        }
                    },
                    error: function(xhr, status, error) {
                        alert('حدث خطأ أثناء الحذف: ' + xhr.status + ' - ' + error);
                    }
                });
            }

            // Refresh grid after operations
            function refreshGrid() {
                Reload(usersGrid.searchObject, usersGrid);
                selectedUserId = null;
                updateActionButtons();
            }


            // Expose only the refresh function globally for modals
            window.refreshUsersGrid = refreshGrid;
        })();

        // Required functions for mGrid tooltip functionality
        function td_MouseOver(event, customFunction) {
            var tooltip = document.getElementById("div_title");
            if (tooltip) {
                var element = event.target || event.srcElement;
                if (element && element.getAttribute('full_title')) {
                    tooltip.innerHTML = element.getAttribute('full_title');
                    tooltip.style.display = 'block';
                    tooltip.style.left = (event.pageX + 10) + 'px';
                    tooltip.style.top = (event.pageY + 10) + 'px';
                }
                if (customFunction && typeof customFunction === 'string') {
                    eval(customFunction);
                }
            }
        }

        function td_MouseOut(event) {
            var tooltip = document.getElementById("div_title");
            if (tooltip) {
                tooltip.style.display = 'none';
            }
        }

        function div_title_MouseOver(element) {
            element.style.display = 'block';
        }

        function div_title_MouseOut(element) {
            element.style.display = 'none';
        }
    </script>
}
